<template>
  <div class="team-knowledge">
    <!-- 搜索和筛选区域 -->
    <div class="filter-section" v-if="userTeamId !== 0">
      <el-row :gutter="20">
        <el-col :span="24">
          <el-input
            v-model="filterForm.keyword"
            placeholder="搜索团队知识..."
            :prefix-icon="Search"
            clearable
            @keyup.enter="handleSearch"
          />
        </el-col>
      </el-row>
    </div>

    <!-- 文档列表 -->
    <el-card class="document-list">
      <div class="tabs-header-with-button">
        <el-tabs v-model="activeTab" @tab-click="handleTabClick" v-if="currentPath.length === 0 && !isSearchMode">
          <el-tab-pane v-if="userTeamId === 0" label="所有团队" name="allTeams"></el-tab-pane>
          <el-tab-pane v-if="userTeamId !== 0" label="我的团队" name="myTeams"></el-tab-pane>
        </el-tabs>
        
        <!-- 创建团队按钮 - 只有当用户没有加入任何团队时显示 -->
        <div class="create-team-btn" v-if="userTeamId === 0 && activeTab === 'allTeams'">
          <el-button type="primary" size="small" @click="handleCreateTeam">
            <el-icon><Plus /></el-icon> 创建团队
          </el-button>
        </div>
      </div>

      <!-- 列表视图 -->
      <el-table
        :data="currentLocationDocuments"
        style="width: 100%"
        @row-click="handleRowClick"
        v-loading="loading"
        :header-cell-style="{ backgroundColor: '#f5f7fa', color: '#606266', fontWeight: 'bold' }" 
        :cell-style="(scope: any) => {
          const column = scope.column;
          let align = 'center';
          
          // 根据列的标识设置对齐方式
          if (column.property === 'name' || column.property === 'title' || column.property === 'description') {
            align = 'left';
          }
          
          return { textAlign: align };
        }"
        :fit="true"
        :border="false"
      >
        <template #empty>
          <el-empty :description="currentPath.length === 0 ? '暂无知识库' : '暂无文档'" />
        </template>
        
        <!-- 名称列 (始终显示) -->
        <el-table-column 
          :label="activeTab === 'allTeams' || activeTab === 'myTeams' ? '团队名称' : '名称'" 
          min-width="180" 
          align="left" 
          header-align="left"
        >
          <template #header>
            <span style="text-align: left; display: block; padding-left: 10px;">{{ activeTab === 'allTeams' || activeTab === 'myTeams' ? '团队名称' : '名称' }}</span>
          </template>
          <template #default="scope">
            <div class="file-name-cell" style="display: flex; align-items: center; justify-content: flex-start;">
              <el-icon :size="18" class="file-icon" style="margin-right: 8px;">
                <component :is="(activeTab === 'allTeams' || activeTab === 'myTeams') ? 'User' : (scope.row.isFolder ? 'Folder' : getDocumentIcon(scope.row.docType))"></component>
              </el-icon>
              <span 
                :class="{ 'folder-name': scope.row.isFolder || activeTab === 'allTeams' || activeTab === 'myTeams' }"
                @click.stop="(activeTab === 'allTeams' || activeTab === 'myTeams') ? showTeamInfo(scope.row) : showTeamInfo(scope.row)"
              >{{ scope.row.isFolder ? scope.row.name : scope.row.title }}</span>
              <el-tag v-if="!scope.row.isFolder && scope.row.isImportant" size="small" type="danger" style="margin-left: 5px;">重要</el-tag>
            </div>
          </template>
        </el-table-column>
        
        <!-- 团队ID列 (只在allTeams标签页显示) -->
        <el-table-column v-if="activeTab === 'allTeams' || activeTab === 'myTeams'" label="团队ID" width="100" align="center" header-align="center">
          <template #header>
            <span style="text-align: center; display: block;">团队ID</span>
          </template>
          <template #default="scope">
            <div style="text-align: center;">{{ scope.row.id }}</div>
          </template>
        </el-table-column>
        
        <!-- 创建人列 (所有标签页都显示，但在allTeams中显示的是ownerId) -->
        <el-table-column :label="activeTab === 'allTeams' || activeTab === 'myTeams' ? '创建人ID' : '创建人'" width="120" align="center" header-align="center">
          <template #header>
            <span style="text-align: center; display: block;">{{ activeTab === 'allTeams' || activeTab === 'myTeams' ? '创建人ID' : '创建人' }}</span>
          </template>
          <template #default="scope">
            <div style="text-align: center;">
              <span v-if="activeTab === 'allTeams' || activeTab === 'myTeams'">{{ scope.row.ownerId }}</span>
              <span v-else-if="!scope.row.isFolder">{{ scope.row.author }}</span>
              <span v-else>-</span>
            </div>
          </template>
        </el-table-column>
        
        <!-- 描述列 (只在allTeams标签页显示) -->
        <el-table-column v-if="activeTab === 'allTeams' || activeTab === 'myTeams'" label="描述" min-width="200" align="left" header-align="left">
          <template #header>
            <span style="text-align: left; display: block; padding-left: 10px;">描述</span>
          </template>
          <template #default="scope">
            <div style="text-align: left; padding-left: 10px;">{{ scope.row.description || '-' }}</div>
          </template>
        </el-table-column>
        
        <!-- 创建日期列 (非搜索模式且非allTeams标签页显示) -->
        <el-table-column v-if="!isSearchMode && activeTab !== 'allTeams' && activeTab !== 'myTeams'" label="创建日期" width="150" align="center" header-align="center">
          <template #header>
            <span style="text-align: center; display: block;">创建日期</span>
          </template>
          <template #default="scope">
            <div style="text-align: center;">{{ scope.row.createTime || scope.row.updateTime || '-' }}</div>
          </template>
        </el-table-column>
        
        <!-- 分类列 (非搜索模式且非allTeams标签页且不是文件夹时显示) -->
        <el-table-column v-if="!isSearchMode && activeTab !== 'allTeams' && activeTab !== 'myTeams'" label="分类" width="120" align="center" header-align="center">
          <template #header>
            <span style="text-align: center; display: block;">分类</span>
          </template>
          <template #default="scope">
            <div style="text-align: center;">
              <span v-if="!scope.row.isFolder">{{ scope.row.category }}</span>
              <span v-else>-</span>
            </div>
          </template>
        </el-table-column>
        
        <!-- 所属团队列 (非allTeams标签页且不是文件夹时显示) -->
        <el-table-column v-if="!isSearchMode && activeTab !== 'allTeams' && activeTab !== 'myTeams' && currentPath.length === 0" label="所属团队" width="120" align="center" header-align="center">
          <template #header>
            <span style="text-align: center; display: block;">所属团队</span>
          </template>
          <template #default="scope">
            <div style="text-align: center;">
              <span v-if="!scope.row.isFolder">{{ scope.row.teamName }}</span>
              <span v-else>-</span>
            </div>
          </template>
        </el-table-column>
        
        <!-- 标签列 (非搜索模式且非allTeams标签页显示) -->
        <el-table-column v-if="!isSearchMode && activeTab !== 'allTeams' && activeTab !== 'myTeams'" label="标签" width="160" align="center" header-align="center">
          <template #header>
            <span style="text-align: center; display: block;">标签</span>
          </template>
          <template #default="scope">
            <div style="text-align: center;">
              <template v-if="!scope.row.isFolder && scope.row.tags && scope.row.tags.length > 0">
                <el-tag v-for="tag in scope.row.tags" :key="tag" size="small" class="mx-1">{{ tag }}</el-tag>
              </template>
              <span v-else>-</span>
            </div>
          </template>
        </el-table-column>
        
        <!-- 操作列 (非搜索模式显示) -->
        <el-table-column v-if="!isSearchMode" label="操作" width="150" align="center" header-align="center">
          <template #header>
            <span style="text-align: center; display: block;">操作</span>
          </template>
          <template #default="scope">
            <div class="table-actions" style="display: flex; justify-content: center; gap: 5px;">
              <template v-if="activeTab === 'allTeams'">
                <el-tooltip content="查看成员" placement="top">
                  <el-button type="info" size="small" text @click.stop="showTeamMembers(scope.row)">
                    <el-icon><View /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="申请列表" placement="top">
                  <el-button type="warning" size="small" text @click.stop="showTeamApplyList(scope.row)">
                    <el-icon><List /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="更新信息" placement="top">
                  <el-button type="primary" size="small" text @click.stop="handleUpdateTeam(scope.row)">
                    <el-icon><Edit /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="加入该团队" placement="top">
                  <el-button type="success" size="small" text @click.stop="joinTeam(scope.row)">
                    <el-icon><Plus /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="删除团队" placement="top">
                  <el-button type="danger" size="small" text @click.stop="handleDeleteTeam(scope.row)">
                    <el-icon><Delete /></el-icon>
                  </el-button>
                </el-tooltip>
              </template>
              <template v-else-if="activeTab === 'myTeams'">
                <el-tooltip content="查看成员" placement="top">
                  <el-button type="info" size="small" text @click.stop="showTeamMembers(scope.row)">
                    <el-icon><View /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="申请列表" placement="top">
                  <el-button type="warning" size="small" text @click.stop="showTeamApplyList(scope.row)">
                    <el-icon><List /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="更新信息" placement="top">
                  <el-button type="primary" size="small" text @click.stop="handleUpdateTeam(scope.row)">
                    <el-icon><Edit /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="退出团队" placement="top">
                  <el-button type="warning" size="small" text @click.stop="handleExitTeam(scope.row)">
                    <el-icon><CircleClose /></el-icon>
                  </el-button>
                </el-tooltip>
                <el-tooltip content="删除团队" placement="top">
                  <el-button type="danger" size="small" text @click.stop="handleDeleteTeam(scope.row)">
                    <el-icon><Delete /></el-icon>
                  </el-button>
                </el-tooltip>
              </template>
              <template v-else-if="!scope.row.isFolder">
                <el-button type="primary" size="small" text @click.stop="editDocument(scope.row)" v-if="canEditDocument(scope.row)">
                  <el-icon><Edit /></el-icon>
                </el-button>
                <el-button type="info" size="small" text @click.stop="downloadDocument(scope.row)">
                  <el-icon><Download /></el-icon>
                </el-button>
                <el-button :type="scope.row.isFavorite ? 'warning' : 'success'" size="small" text @click.stop="toggleFavorite(scope.row)">
                  <el-icon v-if="scope.row.isFavorite"><Star /></el-icon>
                  <el-icon v-else><Share /></el-icon>
                </el-button>
                <el-button type="danger" size="small" text @click.stop="deleteDocument(scope.row)" v-if="canDeleteDocument(scope.row)">
                  <el-icon><Delete /></el-icon>
                </el-button>
              </template>
              <template v-else>
                <el-button type="primary" size="small" text @click.stop="editFolder(scope.row)">
                  <el-icon><Edit /></el-icon>
                </el-button>
                <el-button type="danger" size="small" text @click.stop="deleteFolder(scope.row)">
                  <el-icon><Delete /></el-icon>
                </el-button>
              </template>
            </div>
          </template>
        </el-table-column>
      </el-table>

      <!-- 分页 -->
      <div class="pagination-container">
        <el-pagination
          v-model:current-page="pagination.currentPage"
          v-model:page-size="pagination.pageSize"
          :page-sizes="[8, 16, 24, 36]"
          :total="pagination.total"
          layout="total, sizes, prev, pager, next, jumper"
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
        />
      </div>
    </el-card>

    <!-- 新建文档对话框 -->
    <el-dialog
      v-model="createDialogVisible"
      title="新建团队知识文档"
      width="600px"
    >
      <el-form :model="documentForm" :rules="documentRules" ref="documentFormRef" label-width="80px">
        <el-form-item label="标题" prop="title">
          <el-input v-model="documentForm.title" placeholder="请输入文档标题" />
        </el-form-item>
        <el-form-item label="分类" prop="category">
          <el-select v-model="documentForm.category" placeholder="请选择分类" style="width: 100%">
            <el-option v-for="item in categoryOptions" :key="item.value" :label="item.label" :value="item.value" />
          </el-select>
        </el-form-item>
        <el-form-item label="团队" prop="teamId">
          <el-select v-model="documentForm.teamId" placeholder="请选择团队" style="width: 100%">
            <el-option v-for="team in teamOptions" :key="team.id" :label="team.name" :value="team.id" />
          </el-select>
        </el-form-item>
        <el-form-item label="重要性" prop="isImportant">
          <el-switch
            v-model="documentForm.isImportant"
            active-text="重要"
            inactive-text="普通"
          />
        </el-form-item>
        <el-form-item label="描述" prop="description">
          <el-input 
            v-model="documentForm.description" 
            type="textarea" 
            :rows="3" 
            placeholder="请输入文档描述" 
          />
        </el-form-item>
        <el-form-item label="标签">
          <el-tag
            v-for="tag in documentForm.tags"
            :key="tag"
            class="mx-1"
            closable
            @close="handleRemoveTag(tag)"
          >
            {{ tag }}
          </el-tag>
          <el-input
            v-if="inputTagVisible"
            ref="InputTagRef"
            v-model="inputTagValue"
            class="tag-input"
            size="small"
            @keyup.enter="handleInputTagConfirm"
            @blur="handleInputTagConfirm"
          />
          <el-button v-else class="button-new-tag" size="small" @click="showInputTag">
            + 新标签
          </el-button>
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="createDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitDocument">确定</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 导入文档对话框 -->
    <el-dialog
      v-model="importDialogVisible"
      title="导入文档"
      width="500px"
    >
      <el-upload
        class="upload-container"
        drag
        action="https://run.mocky.io/v3/9d059bf9-4660-45f2-925d-ce80ad6c4d15"
        multiple
        :limit="5"
        :on-success="handleUploadSuccess"
        :on-error="handleUploadError"
        :before-upload="beforeUpload"
      >
        <el-icon class="el-icon--upload"><upload-filled /></el-icon>
        <div class="el-upload__text">
          将文件拖到此处，或<em>点击上传</em>
        </div>
        <template #tip>
          <div class="el-upload__tip">
            支持 .docx, .xlsx, .pptx, .pdf, .md 等多种格式，单个文件不超过10MB
          </div>
        </template>
      </el-upload>
      
      <div class="upload-options">
        <el-form :model="importOptions" label-width="100px">
          <el-form-item label="团队" prop="teamId">
            <el-select v-model="importOptions.teamId" placeholder="请选择团队" style="width: 100%">
              <el-option v-for="team in teamOptions" :key="team.id" :label="team.name" :value="team.id" />
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-checkbox v-model="importOptions.autoCategory">自动分类</el-checkbox>
            <el-checkbox v-model="importOptions.autoTag">自动标签</el-checkbox>
            <el-checkbox v-model="importOptions.extractSummary">提取摘要</el-checkbox>
            <el-checkbox v-model="importOptions.isImportant">标记为重要</el-checkbox>
          </el-form-item>
        </el-form>
      </div>
    </el-dialog>

    <!-- 共享文档对话框 -->
    <el-dialog
      v-model="shareDialogVisible"
      title="共享文档"
      width="500px"
    >
      <el-form :model="shareForm" label-width="80px">
        <el-form-item label="共享给">
          <el-select
            v-model="shareForm.users"
            multiple
            filterable
            placeholder="请选择用户"
            style="width: 100%"
            collapse-tags
            collapse-tags-tooltip
          >
            <el-option
              v-for="item in userOptions"
              :key="item.value"
              :label="item.label"
              :value="item.value"
            />
          </el-select>
        </el-form-item>
        <el-form-item label="权限">
          <el-radio-group v-model="shareForm.permission">
            <el-radio :label="'read'">只读权限</el-radio>
            <el-radio :label="'edit'">编辑权限</el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item label="链接">
          <div class="share-link">
            <el-input v-model="shareForm.link" readonly>
              <template #append>
                <el-button @click="copyShareLink">复制</el-button>
              </template>
            </el-input>
          </div>
        </el-form-item>
        <el-form-item label="有效期">
          <el-select v-model="shareForm.expiration" placeholder="请选择">
            <el-option label="永久有效" value="never" />
            <el-option label="1天" value="1day" />
            <el-option label="7天" value="7days" />
            <el-option label="30天" value="30days" />
            <el-option label="自定义" value="custom" />
          </el-select>
          <el-date-picker
            v-if="shareForm.expiration === 'custom'"
            v-model="shareForm.expirationDate"
            type="datetime"
            placeholder="选择日期时间"
            style="margin-top: 10px; width: 100%;"
          />
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="shareDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="confirmShare">确定</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 创建文件夹对话框 -->
    <el-dialog
      v-model="createFolderDialogVisible"
      title="创建知识库"
      width="600px"
    >
      <el-form :model="folderForm" :rules="folderRules" ref="folderFormRef" label-width="80px">
        <el-form-item label="名称" prop="name">
          <el-input v-model="folderForm.name" placeholder="请输入知识库名称" />
        </el-form-item>
        <el-form-item label="描述" prop="description">
          <el-input 
            v-model="folderForm.description" 
            type="textarea" 
            :rows="3" 
            placeholder="请输入知识库描述" 
          />
        </el-form-item>
        <el-form-item label="团队" prop="teamId">
          <el-select v-model="folderForm.teamId" placeholder="请选择团队" style="width: 100%">
            <el-option v-for="team in teamOptions" :key="team.id" :label="team.name" :value="team.id" />
          </el-select>
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="createFolderDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitFolder">确定</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 申请加入团队对话框 -->
    <el-dialog
      v-model="joinTeamDialogVisible"
      title="申请加入团队"
      width="500px"
    >
      <el-form :model="joinTeamForm" :rules="joinTeamRules" ref="joinTeamFormRef" label-width="80px">
        <el-form-item label="团队" prop="teamId">
          <el-select v-model="joinTeamForm.teamId" placeholder="请选择团队" style="width: 100%">
            <el-option v-for="team in teamOptions" :key="team.id" :label="team.name" :value="team.id" />
          </el-select>
        </el-form-item>
        <el-form-item label="申请信息" prop="applyMessage">
          <el-input 
            v-model="joinTeamForm.applyMessage" 
            type="textarea" 
            :rows="3" 
            placeholder="请输入申请信息" 
          />
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="joinTeamDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitJoinTeam">确定</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 创建团队对话框 -->
    <el-dialog
      v-model="createTeamDialogVisible"
      title="创建团队"
      width="450px"
    >
      <el-form :model="createTeamForm" :rules="createTeamRules" ref="createTeamFormRef" label-width="80px">
        <el-form-item label="团队名称" prop="teamName">
          <el-input v-model="createTeamForm.teamName" placeholder="请输入团队名称" />
        </el-form-item>
        <el-form-item label="描述" prop="description">
          <el-input 
            v-model="createTeamForm.description" 
            type="textarea" 
            :rows="3" 
            placeholder="请输入团队描述" 
          />
        </el-form-item>
        <el-form-item label="状态" prop="status">
          <el-select v-model="createTeamForm.status" placeholder="请选择团队状态">
            <el-option label="公开" :value="1" />
            <el-option label="私密" :value="0" />
          </el-select>
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="createTeamDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitCreateTeam">确定</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 团队信息对话框 -->
    <el-dialog
      v-model="teamInfoDialogVisible"
      title="团队信息"
      width="500px"
    >
      <div v-if="currentTeamInfo" class="team-info-container">
        <el-descriptions :column="1" border>
          <el-descriptions-item label="团队名称">{{ currentTeamInfo.teamName }}</el-descriptions-item>
          <el-descriptions-item label="团队ID">{{ currentTeamInfo.id }}</el-descriptions-item>
          <el-descriptions-item label="创建者ID">{{ currentTeamInfo.ownerId }}</el-descriptions-item>
          <el-descriptions-item label="创建时间">{{ currentTeamInfo.createTime }}</el-descriptions-item>
          <el-descriptions-item label="更新时间">{{ currentTeamInfo.updateTime }}</el-descriptions-item>
          <el-descriptions-item label="描述">{{ currentTeamInfo.description || '暂无描述' }}</el-descriptions-item>
          <el-descriptions-item label="状态">
            <el-tag :type="currentTeamInfo.status === 1 ? 'success' : 'info'">
              {{ currentTeamInfo.status === 1 ? '公开' : '私密' }}
            </el-tag>
          </el-descriptions-item>
        </el-descriptions>
      </div>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="teamInfoDialogVisible = false">关闭</el-button>
          <el-button type="primary" v-if="currentTeamInfo && currentTeamInfo.ownerId !== userId && userTeamId === 0" @click="joinTeam(currentTeamInfo)">
            申请加入
          </el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 团队成员对话框 -->
    <el-dialog
      v-model="teamMembersDialogVisible"
      title="团队成员"
      width="700px"
    >
      <div v-if="teamMembers.length > 0" class="team-members-container">
        <el-table :data="teamMembers" style="width: 100%" :border="false">
          <el-table-column prop="userName" label="用户姓名" min-width="120" />
          <el-table-column prop="userId" label="用户ID" width="100" align="center" />
          <el-table-column label="角色名称" width="120" align="center">
            <template #default="scope">
              <el-tag :type="getRoleTagType(scope.row.roleId)">
                {{ scope.row.roleName || '-' }}
              </el-tag>
            </template>
          </el-table-column>
          <el-table-column prop="joinTime" label="加入时间" min-width="160" align="center" />
          <el-table-column label="操作" width="100" align="center">
            <template #default="scope">
              <el-button type="primary" size="small" text @click="showEditRoleDialog(scope.row)">
                <el-icon><Edit /></el-icon>
              </el-button>
            </template>
          </el-table-column>
        </el-table>
      </div>
      <div v-else class="no-members">
        <el-empty description="暂无团队成员" />
      </div>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="teamMembersDialogVisible = false">关闭</el-button>
          <el-button type="primary" @click="showAddMemberDialog">添加成员</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 编辑角色对话框 -->
    <el-dialog
      v-model="editRoleDialogVisible"
      title="编辑成员角色"
      width="400px"
      :append-to-body="true"
    >
      <el-form :model="editRoleForm" label-width="80px">
        <el-form-item label="团队ID">
          <el-input v-model="editRoleForm.teamId" placeholder="请输入用户名" style="width: 180px;" />
        </el-form-item>
        <el-form-item label="用户ID">
          <el-input v-model.number="editRoleForm.userId" placeholder="请输入用户ID" style="width: 180px;" />
        </el-form-item>
        <el-form-item label="角色">
          <el-select v-model="editRoleForm.roleId" placeholder="请选择角色" style="width: 180px;">
            <el-option :label="getRoleName(3)" :value="3"  />
            <el-option :label="getRoleName(2)" :value="2" />
            <el-option :label="getRoleName(1)" :value="1" />
          </el-select>
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="editRoleDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitEditRole">确认</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 更新团队对话框 -->
    <el-dialog
      v-model="updateTeamDialogVisible"
      title="更新团队信息"
      width="450px"
    >
      <el-form :model="updateTeamForm" :rules="updateTeamRules" ref="updateTeamFormRef" label-width="80px">
        <el-form-item label="团队名称" prop="teamName">
          <el-input v-model="updateTeamForm.teamName" placeholder="请输入团队名称" />
        </el-form-item>
        <el-form-item label="描述" prop="description">
          <el-input 
            v-model="updateTeamForm.description" 
            type="textarea" 
            :rows="3" 
            placeholder="请输入团队描述" 
          />
        </el-form-item>
        <el-form-item label="状态" prop="status">
          <el-select v-model="updateTeamForm.status" placeholder="请选择团队状态">
            <el-option label="公开" :value="1" />
            <el-option label="私密" :value="0" />
          </el-select>
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="updateTeamDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitUpdateTeam">确定</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 申请列表对话框 -->
    <el-dialog
      v-model="teamApplyDialogVisible"
      :title="`申请加入${currentTeamApply.teamName} 团队用户信息`"
      width="700px"
    >
      <div v-if="teamApplyList.length > 0">
        <el-table :data="teamApplyList" style="width: 100%; box-shadow: none;" :border="false">
          <el-table-column prop="userId" label="用户ID" width="100" align="center" />
          <el-table-column prop="username" label="用户名" min-width="120" />
          <el-table-column prop="createTime" label="申请时间" min-width="160" align="center" />
          <el-table-column prop="applyMessage" label="申请信息" min-width="200">
            <template #default="scope">
              <div class="apply-message-cell">{{ scope.row.applyMessage || '-' }}</div>
            </template>
          </el-table-column>
          <el-table-column label="操作" width="160" align="center">
            <template #default="scope">
              <el-button type="success" size="small" @click="handlePassApply(scope.row)">通过</el-button>
              <el-button type="danger" size="small" @click="handleRejectApply(scope.row)">拒绝</el-button>
            </template>
          </el-table-column>
        </el-table>
      </div>
      <div v-else class="no-applies">
        <el-empty description="暂无申请记录" />
      </div>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="teamApplyDialogVisible = false">关闭</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 通过申请对话框 -->
    <el-dialog
      v-model="passApplyDialogVisible"
      title="通过申请"
      width="500px"
    >
      <el-form :model="passApplyForm" :rules="passApplyRules" ref="passApplyFormRef" label-width="80px">
        <el-form-item label="申请ID">
          <el-input v-model="passApplyForm.recordId" disabled />
        </el-form-item>
        <el-form-item label="通过信息" prop="passMessage">
          <el-input v-model="passApplyForm.passMessage" placeholder="请输入通过信息" />
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="passApplyDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitPassApply">确定</el-button>
        </span>
      </template>
    </el-dialog>

    <!-- 拒绝申请对话框 -->
    <el-dialog
      v-model="rejectApplyDialogVisible"
      title="拒绝申请"
      width="500px"
    >
      <el-form :model="rejectApplyForm" :rules="rejectApplyRules" ref="rejectApplyFormRef" label-width="80px">
        <el-form-item label="申请ID">
          <el-input v-model="rejectApplyForm.recordId" disabled />
        </el-form-item>
        <el-form-item label="拒绝信息" prop="rejectMessage">
          <el-input v-model="rejectApplyForm.rejectMessage" placeholder="请输入拒绝信息" />
        </el-form-item>
      </el-form>
      <template #footer>
        <span class="dialog-footer">
          <el-button @click="rejectApplyDialogVisible = false">取消</el-button>
          <el-button type="primary" @click="submitRejectApply">确定</el-button>
        </span>
      </template>
    </el-dialog>
  </div>
</template>

// 监听teamList变化，确保列表更新时刷新文档列表
watch(teamList, () => {
  console.log("teamList变化了，调用fetchDocumentList");
  fetchDocumentList();
});

<script lang="ts" setup>
import { ref, reactive, computed, onMounted, nextTick, watch, toRaw } from 'vue'
import type { FormInstance, FormRules } from 'element-plus'
import { ElMessage, ElMessageBox } from 'element-plus'
import { useRouter, useRoute } from 'vue-router'
import { 
  Document, Reading, Search, User, Plus, Upload, Download, List, Grid, Link, View, Star, StarFilled, MoreFilled,
  ArrowDown, UploadFilled, Share, Histogram, Setting, Edit, Delete, Folder, FolderAdd, DocumentAdd, Back,
  SwitchButton, Position, Right, CircleClose
} from '@element-plus/icons-vue'
import userStore from '@/store/user'
import { useFavoritesStore } from '@/store/modules/favorites'
import { getTeamList, applyForJoinTeam, deleteTeam, exitTeam, createTeam, getTeamInfo, getTeamMembers, updateTeam, updateTeamRole, getTeamApplyList, passJoinTeam, rejectJoinTeam, addTeamMember } from '@/api/team'
import { getUserInfo } from '@/api/user'

// 存储用户的团队ID，从getUserInfo接口获取
const userTeamId = ref(0)
const userId = ref(0) // 存储用户ID

// 定义团队列表数据类型
interface TeamItem {
  id: number;
  teamName: string;
  ownerId: number;
  description: string;
}

// 存储团队列表数据
const teamList = ref<TeamItem[]>([])

// 定义筛选表单类型
interface FilterForm {
  keyword: string;
  category: string;
  tags: string[];
  teamId: number | null;
}

// 定义文档表单类型
interface DocumentForm {
  title: string;
  category: string;
  teamId: number | null;
  isImportant: boolean;
  description: string;
  tags: string[];
}

// 定义文档类型
interface Document {
  id: number;
  title: string;
  category: string;
  docType: string;
  description: string;
  teamId: number;
  teamName: string;
  author: string;
  updateTime: string;
  visitCount: number;
  isImportant: boolean;
  isFavorite: boolean;
  tags: string[];
  isFolder?: boolean;
  name?: string;
  createTime?: string;
  parentId?: number;
}

// 路由对象
const router = useRouter()
const route = useRoute()

// 多选表格引用
const multipleSelection = ref<any[]>([])

// 文档分类选项
const categoryOptions = ref([
  { label: '技术文档', value: 'tech' },
  { label: '会议纪要', value: 'meeting' },
  { label: '项目文档', value: 'project' },
  { label: '管理制度', value: 'management' },
  { label: '培训资料', value: 'training' },
  { label: '其他', value: 'other' }
])

// 标签选项
const tagOptions = ref([
  { label: '重要', value: '重要' },
  { label: '紧急', value: '紧急' },
  { label: '创新', value: '创新' },
  { label: '规范', value: '规范' },
  { label: '参考', value: '参考' },
  { label: '讨论', value: '讨论' }
])

// 团队选项
interface TeamOption {
  id: number;
  name: string;
}
const teamOptions = ref<TeamOption[]>([])

// 用户选项
const userOptions = ref([
  { label: '张三', value: 'zhangsan' },
  { label: '李四', value: 'lisi' },
  { label: '王五', value: 'wangwu' },
  { label: '赵六', value: 'zhaoliu' }
])

// 当前用户信息
const currentUser = computed(() => {
  return {
    id: 1,
    name: userStore.state.username || '当前用户',
    role: 'admin', // 可以是 admin, manager, member
    teams: [1, 2] // 用户所属的团队ID
  }
})

// 筛选表单
const filterForm = reactive<FilterForm>({
  keyword: '',
  category: '',
  tags: [],
  teamId: null
})

// 加载状态
const loading = ref(false)

// 当前选中的标签页
const activeTab = ref('all')

// 分页信息
const pagination = reactive({
  currentPage: 1,
  pageSize: 8,
  total: 0
})

// 统计数据
const statistics = reactive({
  totalDocuments: 42,
  totalMembers: 18,
  monthlyNew: 12,
  totalReferences: 76
})

// 文档列表数据
const documentList = ref<Document[]>([])

// 新建文档表单
const documentFormRef = ref<FormInstance>()
const documentForm = reactive<DocumentForm>({
  title: '',
  category: '',
  teamId: null,
  isImportant: false,
  description: '',
  tags: [] as string[]
})

// 表单验证规则
const documentRules: FormRules = {
  title: [
    { required: true, message: '请输入文档标题', trigger: 'blur' },
    { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
  ],
  category: [
    { required: true, message: '请选择文档分类', trigger: 'change' }
  ],
  teamId: [
    { required: true, message: '请选择团队', trigger: 'change' }
  ]
}

// 导入选项
const importOptions = reactive({
  teamId: null,
  autoCategory: true,
  autoTag: true,
  extractSummary: true,
  isImportant: false
})

// 共享表单
const shareForm = reactive({
  documentId: 0,
  documentTitle: '',
  users: [] as string[],
  permission: 'read',
  link: 'https://example.com/share/doc/123456789',
  expiration: 'never',
  expirationDate: null
})

// 对话框可见性
const createDialogVisible = ref(false)
const importDialogVisible = ref(false)
const shareDialogVisible = ref(false)
const createFolderDialogVisible = ref(false)
const joinTeamDialogVisible = ref(false)

// 申请加入团队表单
const joinTeamForm = reactive({
  teamId: 0,
  userId: 0,
  applyMessage: ''
})

// 申请加入团队表单验证规则
const joinTeamRules = {
  applyMessage: [
    { required: false, message: '请输入申请信息', trigger: 'blur' }
  ]
}

// 标签输入相关
const InputTagRef = ref()
const inputTagVisible = ref(false)
const inputTagValue = ref('')

// 文件夹表单
const folderForm = reactive({
  name: '',
  description: '',
  teamId: null as number | null
})

// 表单验证规则
const folderRules: FormRules = {
  name: [
    { required: true, message: '请输入知识库名称', trigger: 'blur' },
    { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
  ],
  teamId: [
    { required: true, message: '请选择团队', trigger: 'change' }
  ]
}

// 创建团队对话框相关
const createTeamDialogVisible = ref(false)
const createTeamForm = reactive({
  teamName: '',
  description: '',
  status: 1 // 默认状态值
})
const createTeamRules = {
  teamName: [
    { required: true, message: '请输入团队名称', trigger: 'blur' },
    { min: 2, max: 20, message: '团队名称长度在 2 到 20 个字符', trigger: 'blur' }
  ],
  description: [
    { max: 100, message: '描述不能超过100个字符', trigger: 'blur' }
  ]
}
const createTeamFormRef = ref<FormInstance>()

// 生命周期钩子
onMounted(() => {
  // 获取用户信息
  getUserInfo().then(response => {
    if (response.data && response.data.code === 200) {
      const userData = response.data.data
      // 保存用户ID
      userId.value = userData.id
      // 保存用户团队ID
      userTeamId.value = userData.teamId || 0
      
      // 根据团队ID设置默认标签页
      if (userTeamId.value === 0) {
        activeTab.value = 'myTeams'
      } else {
        activeTab.value = 'all' // 用户有团队ID时显示"团队知识库"标签页
      }
      
      // 刷新文档列表
      fetchDocumentList()
    } else {
      console.error('获取用户信息失败:', response.data?.msg)
      // 使用默认值
      userTeamId.value = 0
      activeTab.value = 'myTeams'
      fetchDocumentList()
    }
  }).catch(error => {
    console.error('获取用户信息失败:', error)
    // 使用默认值
    userTeamId.value = 0
    activeTab.value = 'myTeams'
    fetchDocumentList()
  })

  // 获取团队列表数据
  getTeamList().then(response => {
    if (response.data && response.data.code === 200) {
      teamList.value = response.data.data
      console.log('团队列表数据:', teamList.value)
      
      // 将团队列表数据转换为teamOptions格式
      teamOptions.value = teamList.value.map(team => ({
        id: team.id,
        name: team.teamName
      }))
      fetchDocumentList()
    }
  }).catch(error => {
    console.error('获取团队列表失败:', error)
  })
  
  // 处理路由参数
  const { action, id, teamId } = route.query
  if (action === 'create') {
    handleCreateDocument()
    if (teamId) {
      documentForm.teamId = Number(teamId)
    }
  } else if (action === 'edit' && id) {
    const docId = parseInt(id as string)
    const doc = documentList.value.find(item => item.id === docId)
    if (doc) {
      editDocument(doc)
    }
  }
})

// 获取文档图标
const getDocumentIcon = (type: string) => {
  switch (type) {
    case 'doc':
      return 'Document'
    case 'ppt':
      return 'PictureFilled'
    case 'excel':
      return 'Grid'
    case 'pdf':
      return 'Reading'
    default:
      return 'Document'
  }
}

// 权限检查
const canEditDocument = (document: any) => {
  // 如果是管理员，可以编辑任何文档
  if (currentUser.value.role === 'admin') return true
  
  // 如果是自己创建的文档，可以编辑
  if (document.author === currentUser.value.name) return true
  
  // 如果用户是团队成员且有编辑权限，可以编辑
  return currentUser.value.teams.includes(document.teamId)
}

const canDeleteDocument = (document: any) => {
  // 管理员或文档作者可以删除
  return currentUser.value.role === 'admin' || document.author === currentUser.value.name
}

// 处理多选变化
const handleSelectionChange = (val: any[]) => {
  multipleSelection.value = val
}

// 处理搜索
const handleSearch = () => {
  if (!filterForm.keyword.trim()) {
    ElMessage.warning('请输入搜索关键词')
    return
  }
  
  loading.value = true
  console.log('搜索关键词：', filterForm.keyword)
  
  // 模拟搜索请求
  setTimeout(() => {
    // 搜索逻辑
    const keyword = filterForm.keyword.toLowerCase()
    const results = documentList.value.filter(doc => 
      doc.title.toLowerCase().includes(keyword) || 
      (doc.description && doc.description.toLowerCase().includes(keyword))
    )
    
    if (results.length > 0) {
      // 更新列表
      documentList.value = results
      ElMessage.success(`搜索成功，找到 ${results.length} 条匹配结果`)
    } else {
      ElMessage.info(`搜索完成，未找到与"${filterForm.keyword}"匹配的知识内容`)
    }
    
    loading.value = false
  }, 500)
}

// 重置筛选条件
const resetFilter = () => {
  filterForm.keyword = ''
  filterForm.category = ''
  filterForm.tags = []
  filterForm.teamId = null
  fetchDocumentList()
}

// 处理标签页点击
const handleTabClick = (tab: any) => {
  console.log('当前标签页：', tab.props.name)
  fetchDocumentList()
}

// 处理新建文档
const handleCreateDocument = () => {
  // 重置表单
  documentForm.title = ''
  documentForm.category = ''
  documentForm.teamId = null
  documentForm.isImportant = false
  documentForm.description = ''
  documentForm.tags = []
  
  createDialogVisible.value = true
}

// 处理导入文档
const handleImportDocument = () => {
  importOptions.teamId = null
  importOptions.autoCategory = true
  importOptions.autoTag = true
  importOptions.extractSummary = true
  importOptions.isImportant = false
  importDialogVisible.value = true
}

// 文件上传相关
const beforeUpload = (file: any) => {
  const isValidType = ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 
                      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                      'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                      'application/pdf',
                      'text/markdown'].includes(file.type)
  
  const isLt10M = file.size / 1024 / 1024 < 10

  if (!isValidType) {
    ElMessage.error('不支持的文件类型！')
    return false
  }
  
  if (!isLt10M) {
    ElMessage.error('文件大小不能超过 10MB!')
    return false
  }
  
  return true
}

const handleUploadSuccess = (response: any, file: any) => {
  ElMessage.success(`文件"${file.name}"上传成功`)
  importDialogVisible.value = false
  // 刷新文档列表
  fetchDocumentList()
}

const handleUploadError = () => {
  ElMessage.error('上传失败，请重试')
}

// 提交文档
const submitDocument = async () => {
  if (!documentFormRef.value) return
  
  await documentFormRef.value.validate((valid, fields) => {
    if (valid) {
      console.log('表单数据：', documentForm)
      
      // 检查teamId是否为null，如果是则默认选择第一个团队
      if (documentForm.teamId === null && teamOptions.value.length > 0) {
        documentForm.teamId = teamOptions.value[0].id;
      }
      
      // 模拟提交 - 在实际应用中这里应该调用API
      const teamName = teamOptions.value.find(t => t.id === documentForm.teamId)?.name || ''
      const categoryLabel = categoryOptions.value.find(c => c.value === documentForm.category)?.label || ''
      
      // 创建新文档对象
      const newDocument = {
        id: Date.now(),
        title: documentForm.title,
        category: categoryLabel,
        docType: 'doc', // 默认类型
        description: documentForm.description,
        teamId: documentForm.teamId as number, // 确保不为null
        teamName: teamName,
        author: currentUser.value.name,
        updateTime: new Date().toLocaleString(),
        visitCount: 0,
        isImportant: documentForm.isImportant,
        isFavorite: false,
        tags: [...documentForm.tags]
      }
      
      // 添加到列表中
      documentList.value.unshift(newDocument)
      
      ElMessage.success(`文档"${documentForm.title}"保存成功`)
      createDialogVisible.value = false
      
      // 更新统计数据
      statistics.totalDocuments++
      statistics.monthlyNew++
    }
  })
}

// 查看文档
const viewDocument = (document: any) => {
  router.push(`/knowledge/browse?id=${document.id}&from=team`)
}

// 编辑文档
const editDocument = (document: any) => {
  // 实际应用中可以跳转到编辑页面
  router.push(`/knowledge/management?id=${document.id}&action=edit&from=team`)
}

// 生成摘要
const generateSummary = (document: any) => {
  router.push(`/summary?id=${document.id}&from=team`)
}

// 复制文档
const duplicateDocument = (document: any) => {
  // 创建复制文档
  const duplicatedDoc = {
    ...document,
    id: Date.now(),
    title: `${document.title} - 副本`,
    author: currentUser.value.name,
    updateTime: new Date().toLocaleString(),
    visitCount: 0,
    isFavorite: false
  }
  
  // 添加到文档列表
  documentList.value.unshift(duplicatedDoc)
  
  ElMessage.success(`已成功复制文档"${document.title}"`)
  
  // 更新统计
  statistics.totalDocuments++
  statistics.monthlyNew++
}

// 切换文档是否重要
const toggleImportant = (document: any) => {
  document.isImportant = !document.isImportant
  ElMessage.success(document.isImportant ? `文档"${document.title}"已标记为重要` : `文档"${document.title}"已取消重要标记`)
}

// 共享文档
const shareDocument = (document: any) => {
  shareForm.documentId = document.id
  shareForm.documentTitle = document.title
  shareForm.users = []
  shareForm.permission = 'read'
  shareForm.link = `https://example.com/share/doc/${document.id}`
  shareForm.expiration = 'never'
  shareForm.expirationDate = null
  shareDialogVisible.value = true
}

// 确认共享
const confirmShare = () => {
  console.log('共享设置：', shareForm)
  ElMessage.success(`文档"${shareForm.documentTitle}"共享成功`)
  shareDialogVisible.value = false
}

// 复制共享链接
const copyShareLink = () => {
  navigator.clipboard.writeText(shareForm.link)
    .then(() => ElMessage.success('共享链接已成功复制到剪贴板'))
    .catch(err => ElMessage.error('复制失败：' + err))
}

// 切换收藏状态
const toggleFavorite = (document: any) => {
  document.isFavorite = !document.isFavorite
  
  if (document.isFavorite) {
    // 添加到收藏
    const favoriteItem = {
      id: document.id,
      title: document.title,
      abstract: document.description || '暂无描述',
      content: document.content || '',
      category: document.category,
      author: document.author,
      source: 'team' as const,
      sourceUrl: `/team/knowledge?id=${document.id}`,
      tags: document.tags,
      favoriteTime: new Date().toLocaleString()
    }
    
    // 使用store添加收藏
    favoritesStore.addFavorite(favoriteItem)
    ElMessage.success(`文档"${document.title}"已收藏`)
  } else {
    // 从收藏中移除
    favoritesStore.removeFavorite(document.id, 'team')
    ElMessage.success(`文档"${document.title}"已取消收藏`)
  }
}

// 下载文档
const downloadDocument = (document: any) => {
  ElMessage.success(`开始下载文档"${document.title}"`)
}

// 删除文档
const deleteDocument = (document: any) => {
  ElMessageBox.confirm(
    `确定要删除文档"${document.title}"吗？删除后将无法恢复。`,
    '警告',
    {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }
  )
    .then(() => {
      // 从列表中移除文档
      documentList.value = documentList.value.filter(doc => doc.id !== document.id)
      ElMessage.success(`文档"${document.title}"删除成功`)
      
      // 更新统计
      statistics.totalDocuments--
    })
    .catch(() => {
      // 取消删除
      ElMessage.info('已取消删除操作')
    })
}

// 处理新标签
const showInputTag = () => {
  inputTagVisible.value = true
  nextTick(() => {
    InputTagRef.value?.input?.focus()
  })
}

const handleInputTagConfirm = () => {
  if (inputTagValue.value) {
    if (!documentForm.tags.includes(inputTagValue.value)) {
      documentForm.tags.push(inputTagValue.value)
    }
  }
  inputTagVisible.value = false
  inputTagValue.value = ''
}

const handleRemoveTag = (tag: string) => {
  documentForm.tags = documentForm.tags.filter(item => item !== tag)
}

// 分页操作
const handleSizeChange = (val: number) => {
  pagination.pageSize = val
  fetchDocumentList()
}

const handleCurrentChange = (val: number) => {
  pagination.currentPage = val
  fetchDocumentList()
}

// 获取文档列表数据
const fetchDocumentList = () => {
  loading.value = true
  
  // 模拟异步请求
  setTimeout(() => {
    // 实际应用中这里应该发起API请求
    let filteredData: Document[] = [...documentList.value]
    
    switch (activeTab.value) {
      case 'allTeams':
        // 使用getTeamList接口返回的团队列表数据
        if (teamList.value && teamList.value.length > 0) {
          // 将团队列表转换为文档列表格式，过滤掉创建人ID等于当前用户ID的团队
          filteredData = teamList.value
            .filter(team => team.id !== userTeamId.value) // 排除用户当前所属的团队
            .map(team => ({
              id: team.id,
              title: team.teamName,
              name: team.teamName,
              category: '团队',
              docType: 'folder',
              description: team.description || '',
              teamId: team.id,
              teamName: team.teamName,
              author: `创建者ID: ${team.ownerId}`,
              ownerId: team.ownerId, // 保留原始ownerId字段
              updateTime: '-',
              isImportant: false,
              isFavorite: false,
              tags: [],
              isFolder: true,
              createTime: '-'
            }))
      fetchDocumentList()
        } else {
          filteredData = []
        }
        break
      case 'myTeams':
        // 显示我创建的团队（ownerId等于当前用户ID）
        if (teamList.value && teamList.value.length > 0) {
          // 将符合条件的团队列表转换为文档列表格式
          filteredData = teamList.value
            .filter(team => team.id === userTeamId.value) // 只显示用户当前所属的团队
            .map(team => ({
              id: team.id,
              title: team.teamName,
              name: team.teamName,
              category: '我的团队',
              docType: 'folder',
              description: team.description || '',
              teamId: team.id,
              teamName: team.teamName,
              author: `创建者ID: ${team.ownerId}`,
              ownerId: team.ownerId,
              updateTime: '-',
              isImportant: false,
              isFavorite: false,
              tags: [],
              isFolder: true,
              createTime: '-'
            }))
      fetchDocumentList()
        } else {
          filteredData = []
        }
        break
      case 'recent':
        // 按更新时间排序
        filteredData.sort((a, b) => new Date(b.updateTime).getTime() - new Date(a.updateTime).getTime())
        // 如果用户有团队ID，只显示该团队的知识库
        if (userTeamId.value !== 0) {
          filteredData = filteredData.filter(doc => doc.teamId === userTeamId.value)
        }
        break
      case 'created':
        // 只显示当前用户创建的文档
        filteredData = filteredData.filter(doc => doc.author === currentUser.value.name)
        // 如果用户有团队ID，只显示该团队的知识库
        if (userTeamId.value !== 0) {
          filteredData = filteredData.filter(doc => doc.teamId === userTeamId.value)
        }
        break
      case 'popular':
        // 按访问量排序
        filteredData.sort((a, b) => b.visitCount - a.visitCount)
        // 如果用户有团队ID，只显示该团队的知识库
        if (userTeamId.value !== 0) {
          filteredData = filteredData.filter(doc => doc.teamId === userTeamId.value)
        }
        break
      case 'all':
        // 只显示用户所属团队的知识库
        if (userTeamId.value !== 0) {
          filteredData = filteredData.filter(doc => doc.teamId === userTeamId.value)
        }
        break
    }
    
    // 应用关键词筛选
    if (filterForm.keyword && activeTab.value !== 'allTeams') {
      const keyword = filterForm.keyword.toLowerCase()
      filteredData = filteredData.filter(doc => 
        doc.title.toLowerCase().includes(keyword) || 
        (doc.description && doc.description.toLowerCase().includes(keyword))
      )
    }
    
    // 应用分类筛选（不应用于allTeams）
    if (filterForm.category && activeTab.value !== 'allTeams') {
      const categoryLabel = categoryOptions.value.find(c => c.value === filterForm.category)?.label
      filteredData = filteredData.filter(doc => doc.category === categoryLabel)
    }
    
    // 应用标签筛选（不应用于allTeams）
    if (filterForm.tags && filterForm.tags.length > 0 && activeTab.value !== 'allTeams') {
      filteredData = filteredData.filter(doc => 
        filterForm.tags.some(tag => doc.tags.includes(tag))
      )
    }
    
    // 应用团队筛选（不应用于allTeams）
    if (filterForm.teamId && activeTab.value !== 'allTeams') {
      filteredData = filteredData.filter(doc => doc.teamId === filterForm.teamId)
    }
    
    // 更新总数
    pagination.total = filteredData.length
    
    // 分页
    const start = (pagination.currentPage - 1) * pagination.pageSize
    const end = start + pagination.pageSize
    documentList.value = filteredData.slice(start, end)
    
    loading.value = false
  }, 500)
}

const favoritesStore = useFavoritesStore()

// 新增的属性
const currentPath = ref<any[]>([])
const isSearchMode = ref(false)
const searchResultInfo = ref('')

// 新增的方法
const navigateBack = () => {
  currentPath.value.pop()
  fetchDocumentList()
}

const navigateToRoot = () => {
  currentPath.value = []
  fetchDocumentList()
}

const navigateToPath = (index: number) => {
  currentPath.value = currentPath.value.slice(0, index + 1)
  fetchDocumentList()
}

// 进入团队知识库
const enterTeam = (team: any) => {
  // 切换到团队知识库标签页
  userTeamId.value = team.id
  activeTab.value = 'all'
  
  // 可以在这里存储当前团队信息，或者进行其他操作
  ElMessage.success(`进入团队: ${team.name}`)
  
  // 刷新文档列表
  fetchDocumentList()
}

// 加入团队
const joinTeam = (team: any) => {
  joinTeamForm.teamId = team.id
  joinTeamForm.userId = userId.value // 使用从API获取的用户ID
  joinTeamDialogVisible.value = true
}

// 提交加入团队
const submitJoinTeam = () => {
  // 显示加载状态
  loading.value = true
  
  const teamName = teamOptions.value.find(t => t.id === joinTeamForm.teamId)?.name || '该团队'
  
  // 调用加入团队的API
  applyForJoinTeam({ 
    teamId: joinTeamForm.teamId, 
    userId: joinTeamForm.userId, 
    applyMessage: joinTeamForm.applyMessage 
  })
    .then(response => {
      if (response.data && response.data.code === 200) {
        ElMessage.success(`已申请加入团队: ${teamName}`)
        joinTeamDialogVisible.value = false
        
        // 重新获取用户信息，以便更新团队ID
        getUserInfo().then(userResponse => {
          if (userResponse.data && userResponse.data.code === 200) {
            const userData = userResponse.data.data
            // 更新用户ID和团队ID
            userId.value = userData.id
            userTeamId.value = userData.teamId || 0
            
            // 更新标签页显示
            if (userTeamId.value === 0) {
              activeTab.value = 'myTeams'
            } else {
              activeTab.value = 'all'
            }
          }
        }).catch(error => {
          console.error('获取用户信息失败:', error)
        })
      } else {
        ElMessage.error(response.data?.msg || '申请加入团队失败，请稍后重试')
      }
    })
    .catch(error => {
      console.error('申请加入团队失败:', error)
      ElMessage.error('申请加入团队失败，请稍后重试')
    })
    .finally(() => {
      loading.value = false
    })
}

// 删除团队
const handleDeleteTeam = (team: any) => {
  const teamName = team.teamName || team.name || '该团队'
  
  ElMessageBox.confirm(
    `确定要删除团队"${teamName}"吗？此操作不可恢复！`,
    '删除团队',
    {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }
  )
    .then(() => {
      // 显示加载状态
      loading.value = true
      
      // 调用删除团队的API
      deleteTeam(team.id)
        .then(response => {
          if (response.data && response.data.code === 200) {
            ElMessage.success(`删除团队"${teamName}"成功`)
            
            // 检查删除的是否是当前用户的团队
            const isCurrentUserTeam = team.id === userTeamId.value
            
            // 刷新团队列表
            getTeamList().then(response => {
              if (response.data && response.data.code === 200) {
                teamList.value = response.data.data
              }
              
              // 如果删除的是当前用户的团队，重新获取用户信息
              if (isCurrentUserTeam) {
                getUserInfo().then(userResponse => {
                  if (userResponse.data && userResponse.data.code === 200) {
                    const userData = userResponse.data.data
                    // 更新用户ID和团队ID
                    userId.value = userData.id
                    userTeamId.value = userData.teamId || 0
                    
                    // 更新标签页显示
                    if (userTeamId.value === 0) {
                      activeTab.value = 'myTeams'
                    } else {
                      activeTab.value = 'all'
                    }
                  }
                })
              }
              
              fetchDocumentList() // 刷新列表
            })
          } else {
            ElMessage.error(response.data?.msg || '删除团队失败，请稍后重试')
          }
        })
        .catch(error => {
          console.error('删除团队失败:', error)
          ElMessage.error('删除团队失败，请稍后重试')
        })
        .finally(() => {
          loading.value = false
        })
    })
    .catch(() => {
      // 用户取消操作
      ElMessage.info('已取消删除操作')
    })
}

const handleRowClick = (row: any) => {
  if (activeTab.value === 'allTeams' || activeTab.value === 'myTeams') {
    showTeamInfo(row)
  } else {
    showTeamInfo(row)
  }
}

// 删除进入文件夹方法
// const enterFolder = (folder: any) => {
//   currentPath.value.push(folder)
//   fetchDocumentList()
// }

const editFolder = (folder: any) => {
  // 实现编辑文件夹的逻辑
  console.log('编辑文件夹:', folder)
  ElMessage.success(`开始编辑知识库"${folder.name}"`)
}

const deleteFolder = (folder: any) => {
  ElMessageBox.confirm(
    `确定要删除知识库"${folder.name}"吗？删除后将无法恢复。`,
    '警告',
    {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }
  )
    .then(() => {
      console.log('删除文件夹:', folder)
      ElMessage.success(`知识库"${folder.name}"删除成功`)
      // 实际删除逻辑
      documentList.value = documentList.value.filter(doc => doc.id !== folder.id)
    })
    .catch(() => {
      // 取消删除
      ElMessage.info('已取消删除操作')
    })
}

const currentLocationDocuments = computed(() => {
  // 只显示团队列表
  return documentList.value
})

// 创建文件夹
const handleCreateFolder = () => {
  folderForm.name = ''
  folderForm.description = ''
  folderForm.teamId = teamOptions.value.length > 0 ? teamOptions.value[0].id : null
  createFolderDialogVisible.value = true
}

// 提交创建文件夹
const submitFolder = () => {
  if (!folderForm.name.trim()) {
    ElMessage.warning('请输入知识库名称')
    return
  }
  
  // 创建文件夹对象
  const newFolder = {
    id: Date.now(),
    name: folderForm.name,
    description: folderForm.description,
    teamId: folderForm.teamId || 0,
    teamName: teamOptions.value.find(t => t.id === folderForm.teamId)?.name || '',
    author: currentUser.value.name,
    createTime: new Date().toLocaleString(),
    isFolder: true,
    // 添加必要的属性以匹配文档类型
    title: folderForm.name,
    category: '文件夹',
    docType: 'folder',
    updateTime: new Date().toLocaleString(),
    visitCount: 0,
    isImportant: false,
    isFavorite: false,
    tags: []
  }
  
  // 添加到文档列表
  documentList.value.unshift(newFolder)
  
  ElMessage.success(`知识库"${folderForm.name}"创建成功`)
  createFolderDialogVisible.value = false
  
  // 更新统计
  statistics.totalDocuments++
}

// 退出团队
const handleExitTeam = (team: any) => {
  const teamName = team.teamName || team.name || '该团队'
  
  ElMessageBox.confirm(
    `确定要退出团队"${teamName}"吗？`,
    '退出团队',
    {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }
  )
    .then(() => {
      // 显示加载状态
      loading.value = true
      
      // 调用退出团队的API
      exitTeam()
        .then(response => {
          if (response.data && response.data.code === 200) {
            ElMessage.success(`已成功退出团队"${teamName}"`)
            
            // 重新获取用户信息，更新用户的团队ID
            getUserInfo().then(userResponse => {
              if (userResponse.data && userResponse.data.code === 200) {
                const userData = userResponse.data.data
                // 更新用户ID和团队ID
                userId.value = userData.id
                userTeamId.value = userData.teamId || 0
                
                // 更新标签页显示
                if (userTeamId.value === 0) {
                  activeTab.value = 'myTeams'
                } else {
                  activeTab.value = 'all'
                }
                
                // 重置分页
                pagination.currentPage = 1
                
                // 刷新团队列表
                getTeamList().then(response => {
                  if (response.data && response.data.code === 200) {
                    teamList.value = response.data.data
                    // 刷新文档列表
                    fetchDocumentList()
                  }
                })
              }
            })
          } else {
            ElMessage.error(response.data?.msg || '退出团队失败，请稍后重试')
          }
        })
        .catch(error => {
          console.error('退出团队失败:', error)
          ElMessage.error('退出团队失败，请稍后重试')
        })
        .finally(() => {
          loading.value = false
        })
    })
    .catch(() => {
      // 用户取消操作
      ElMessage.info('已取消退出操作')
    })
}

// 创建团队
const handleCreateTeam = () => {
  createTeamDialogVisible.value = true
}

// 提交创建团队
const submitCreateTeam = async () => {
  if (!createTeamFormRef.value) return
  
  await createTeamFormRef.value.validate((valid, fields) => {
    if (valid) {
      console.log('表单数据：', createTeamForm)
      
      // 调用创建团队的API
      createTeam(createTeamForm)
        .then(response => {
          if (response.data && response.data.code === 200) {
            ElMessage.success(`团队"${createTeamForm.teamName}"创建成功`)
            createTeamDialogVisible.value = false
            
            // 刷新团队列表
            getTeamList().then(response => {
              if (response.data && response.data.code === 200) {
                teamList.value = response.data.data
                
                // 重新获取用户信息，更新用户的团队ID
                getUserInfo().then(userResponse => {
                  if (userResponse.data && userResponse.data.code === 200) {
                    const userData = userResponse.data.data
                    // 更新用户ID和团队ID
                    userId.value = userData.id
                    userTeamId.value = userData.teamId || 0
                    
                    // 更新标签页显示
                    if (userTeamId.value === 0) {
                      activeTab.value = 'myTeams'
                    } else {
                      activeTab.value = 'all'
                    }
                    
                    // 重置分页
                    pagination.currentPage = 1
                    
                    // 刷新文档列表
                    fetchDocumentList()
                  }
                }).catch(error => {
                  console.error('获取用户信息失败:', error)
                  // 刷新文档列表
                  fetchDocumentList()
                })
              }
            })
          } else {
            ElMessage.error(response.data?.msg || '创建团队失败，请稍后重试')
          }
        })
        .catch(error => {
          console.error('创建团队失败:', error)
          ElMessage.error('创建团队失败，请稍后重试')
        })
    }
  })
}

// 团队信息对话框相关
const teamInfoDialogVisible = ref(false)
const currentTeamInfo = ref<any>(null)

// 显示团队信息
const showTeamInfo = (team: any) => {
  refreshTeamInfo(team.id)
}

// 刷新团队信息
const refreshTeamInfo = (teamId: number) => {
  loading.value = true
  
  // 调用获取团队信息的API
  getTeamInfo(teamId)
    .then(response => {
      if (response.data && response.data.code === 200) {
        currentTeamInfo.value = response.data.data
        teamInfoDialogVisible.value = true
      } else {
        ElMessage.error(response.data?.msg || '获取团队信息失败')
      }
    })
    .catch(error => {
      console.error('获取团队信息失败:', error)
      ElMessage.error('获取团队信息失败，请稍后重试')
    })
    .finally(() => {
      loading.value = false
    })
}

// 添加团队成员相关变量和方法
const teamMembersDialogVisible = ref(false)
const teamMembers = ref<any[]>([])
const currentTeamId = ref(0)

// 编辑角色对话框相关
const editRoleDialogVisible = ref(false)
const editRoleForm = reactive({
  teamId: 0,
  userId: 0,
  userName: '',
  currentRoleId: 0,
  roleId: 0
})

// 显示编辑角色对话框
const showEditRoleDialog = (member: any) => {
  editRoleForm.teamId = currentTeamId.value
  editRoleForm.userId = member.userId
  editRoleForm.userName = member.userName || `用户${member.userId}`
  editRoleForm.currentRoleId = member.roleId
  editRoleForm.roleId = member.roleId
  editRoleDialogVisible.value = true
}

// 提交编辑角色
const submitEditRole = () => {
  // 如果角色没有变化，直接关闭对话框
  if (editRoleForm.roleId === editRoleForm.currentRoleId) {
    editRoleDialogVisible.value = false
    return
  }
  
  // 构建提交数据
  const submitData = {
    roleId: editRoleForm.roleId,
    teamId: editRoleForm.teamId,
    userId: editRoleForm.userId
  }
  
  console.log('提交角色更新数据:', submitData)
  
  // 调用更新角色API
  loading.value = true
  updateTeamRole(submitData)
    .then(response => {
      console.log('角色更新响应:', response)
      if (response.data && response.data.code === 200) {
        ElMessage.success(`用户"${editRoleForm.userName}"角色已成功更新为${getRoleName(editRoleForm.roleId)}`)
        
        // 更新本地列表中的角色
        const index = teamMembers.value.findIndex(m => m.userId === editRoleForm.userId)
        if (index !== -1) {
          teamMembers.value[index].roleId = editRoleForm.roleId
          teamMembers.value[index].roleName = getRoleName(editRoleForm.roleId)
        }
        
        // 关闭对话框
        editRoleDialogVisible.value = false
      } else {
        ElMessage.error(response.data?.msg || '角色更新失败，请稍后重试')
      }
    })
    .catch(error => {
      console.error('角色更新失败:', error)
      ElMessage.error('角色更新失败，请稍后重试')
    })
    .finally(() => {
      loading.value = false
    })
}

// 显示团队成员
const showTeamMembers = (team: any) => {
  teamMembers.value = []
  currentTeamId.value = team.id
  teamMembersDialogVisible.value = true
  loading.value = true
  
  // 调用获取团队成员列表API
  getTeamMembers(team.id)
    .then(response => {
      if (response.data && response.data.code === 200) {
        teamMembers.value = response.data.data || []
      } else {
        ElMessage.error(response.data?.msg || '获取团队成员失败')
      }
    })
    .catch(error => {
      console.error('获取团队成员失败:', error)
      ElMessage.error('获取团队成员失败，请稍后重试')
    })
    .finally(() => {
      loading.value = false
    })
}

// 获取角色名称
const getRoleName = (roleId: number) => {
  switch(roleId) {
    case 3: return "团队拥有者"
    case 2: return "团队管理员"
    case 1: return "团队成员"
    default: return '未知'
  }
}

// 获取角色标签类型
const getRoleTagType = (roleId: number) => {
  switch(roleId) {
    case 3: return 'danger'
    case 2: return 'warning'
    case 1: return 'info'
    default: return ''
  }
}

// 添加更新团队相关变量和方法
const updateTeamDialogVisible = ref(false)
const updateTeamForm = reactive({
  id: 0,
  teamName: '',
  description: '',
  status: 1
})
const updateTeamRules = {
  teamName: [
    { required: true, message: '请输入团队名称', trigger: 'blur' },
    { min: 2, max: 20, message: '团队名称长度在 2 到 20 个字符', trigger: 'blur' }
  ],
  description: [
    { max: 100, message: '描述不能超过100个字符', trigger: 'blur' }
  ]
}
const updateTeamFormRef = ref<FormInstance>()

// 打开更新团队对话框
const handleUpdateTeam = (team: any) => {
  loading.value = true
  
  // 先获取最新的团队信息
  getTeamInfo(team.id)
    .then(response => {
      if (response.data && response.data.code === 200) {
        const teamInfo = response.data.data
        // 填充表单数据
        updateTeamForm.id = teamInfo.id
        updateTeamForm.teamName = teamInfo.teamName
        updateTeamForm.description = teamInfo.description || ''
        updateTeamForm.status = typeof teamInfo.status === 'number' ? teamInfo.status : 0
        
        // 显示对话框
        updateTeamDialogVisible.value = true
      } else {
        ElMessage.error(response.data?.msg || '获取团队信息失败')
      }
    })
    .catch(error => {
      console.error('获取团队信息失败:', error)
      ElMessage.error('获取团队信息失败，请稍后重试')
    })
    .finally(() => {
      loading.value = false
    })
}

// 提交更新团队信息
const submitUpdateTeam = async () => {
  if (!updateTeamFormRef.value) return
  
  await updateTeamFormRef.value.validate((valid, fields) => {
    if (valid) {
      loading.value = true
      
      // 调用更新团队API
      updateTeam(updateTeamForm)
        .then(response => {
          if (response.data && response.data.code === 200) {
            ElMessage.success(`团队"${updateTeamForm.teamName}"信息更新成功`)
            updateTeamDialogVisible.value = false
            
            // 如果当前正在显示该团队的信息对话框，刷新团队信息
            if (teamInfoDialogVisible.value && currentTeamInfo.value && currentTeamInfo.value.id === updateTeamForm.id) {
              refreshTeamInfo(updateTeamForm.id)
            }
            
            // 刷新团队列表
            getTeamList().then(response => {
              if (response.data && response.data.code === 200) {
                teamList.value = response.data.data
                fetchDocumentList() // 刷新列表显示
              }
            })
          } else {
            ElMessage.error(response.data?.msg || '更新团队信息失败，请稍后重试')
          }
        })
        .catch(error => {
          console.error('更新团队信息失败:', error)
          ElMessage.error('更新团队信息失败，请稍后重试')
        })
        .finally(() => {
          loading.value = false
        })
    }
  })
}

// 团队申请列表相关
const teamApplyDialogVisible = ref(false)
const teamApplyList = ref<any[]>([])
const currentTeamApply = reactive({
  teamId: 0,
  teamName: ''
})

// 通过申请对话框相关
const passApplyDialogVisible = ref(false)
const currentApply = ref<any>(null)
const passApplyFormRef = ref<FormInstance>()
const passApplyForm = reactive({
  passMessage: '',
  recordId: ''
})
const passApplyRules = {
  passMessage: [
    { max: 100, message: '通过信息不能超过100个字符', trigger: 'blur' }
  ]
}

// 拒绝申请对话框相关
const rejectApplyDialogVisible = ref(false)
const rejectApplyFormRef = ref<FormInstance>()
const rejectApplyForm = reactive({
  rejectMessage: '',
  recordId: ''
})
const rejectApplyRules = {
  rejectMessage: [
    { max: 100, message: '拒绝信息不能超过100个字符', trigger: 'blur' }
  ]
}

// 显示团队申请列表
const showTeamApplyList = (team: any) => {
  teamApplyList.value = []
  currentTeamApply.teamId = team.id
  currentTeamApply.teamName = team.teamName || team.name || `团队${team.id}`
  teamApplyDialogVisible.value = true
  loading.value = true
  
  // 调用获取团队申请列表API
  getTeamApplyList(team.id)
    .then(response => {
      console.log('团队申请列表响应:', response)
      if (response.data && response.data.code === 200) {
        teamApplyList.value = response.data.data || []
      } else {
        ElMessage.error(response.data?.msg || '获取申请列表失败')
      }
    })
    .catch(error => {
      console.error('获取申请列表失败:', error)
      ElMessage.error('获取申请列表失败，请稍后重试')
    })
    .finally(() => {
      loading.value = false
    })
}

// 处理通过申请
const handlePassApply = (apply: any) => {
  currentApply.value = apply;
  passApplyForm.passMessage = '';
  passApplyForm.recordId = apply.id.toString();
  passApplyDialogVisible.value = true;
}

// 提交通过申请
const submitPassApply = () => {
  if (!passApplyFormRef.value) return;
  
  passApplyFormRef.value.validate((valid) => {
    if (valid) {
      // 显示加载状态
      loading.value = true;
      
      // 调用通过申请API
      passJoinTeam({
        id: currentApply.value.id,
        teamId: currentTeamApply.teamId,
        userId: currentApply.value.userId,
        passMessage: passApplyForm.passMessage
      })
        .then(response => {
          if (response && response.data && response.data.code === 200) {
            ElMessage.success(`已通过用户 ${currentApply.value.username || currentApply.value.userId} 的申请`);
            
            // 从列表中移除该申请
            teamApplyList.value = teamApplyList.value.filter(item => item.id !== currentApply.value.id);
            passApplyDialogVisible.value = false;
          } else {
            const msg = response && response.data ? response.data.msg : '通过申请失败，请稍后重试';
            ElMessage.error(msg);
          }
        })
        .catch(error => {
          console.error('通过申请失败:', error);
          ElMessage.error('通过申请失败，请稍后重试');
        })
        .finally(() => {
          loading.value = false;
        });
    }
  });
}

// 处理拒绝申请
const handleRejectApply = (apply: any) => {
  currentApply.value = apply;
  rejectApplyForm.rejectMessage = '';
  rejectApplyForm.recordId = apply.id.toString();
  rejectApplyDialogVisible.value = true;
}

// 提交拒绝申请
const submitRejectApply = () => {
  if (!rejectApplyFormRef.value) return;
  
  rejectApplyFormRef.value.validate((valid) => {
    if (valid) {
      // 显示加载状态
      loading.value = true;
      
      // 调用拒绝申请API
      rejectJoinTeam({
        id: currentApply.value.id,
        teamId: currentTeamApply.teamId,
        userId: currentApply.value.userId,
        rejectMessage: rejectApplyForm.rejectMessage
      })
        .then(response => {
          if (response && response.data && response.data.code === 200) {
            ElMessage.success(`已拒绝用户 ${currentApply.value.username || currentApply.value.userId} 的申请`);
            
            // 从列表中移除该申请
            teamApplyList.value = teamApplyList.value.filter(item => item.id !== currentApply.value.id);
            rejectApplyDialogVisible.value = false;
          } else {
            const msg = response && response.data ? response.data.msg : '拒绝申请失败，请稍后重试';
            ElMessage.error(msg);
          }
        })
        .catch(error => {
          console.error('拒绝申请失败:', error);
          ElMessage.error('拒绝申请失败，请稍后重试');
        })
        .finally(() => {
          loading.value = false;
        });
    }
  });
}
</script>

<style scoped>
.team-knowledge {
  padding: 20px;
}

.team-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.team-header h2 {
  margin: 0;
  font-size: 22px;
  color: #409EFF;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.header-actions {
  display: flex;
  gap: 10px;
}

.filter-section {
  margin-bottom: 20px;
}

.filter-container {
  margin-bottom: 20px;
}

.filter-form {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center;
}

/* 统计卡片样式 */
.stats-cards {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 20px;
  margin-bottom: 20px;
}

.stats-card {
  height: 100%;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.stats-value {
  font-size: 28px;
  font-weight: bold;
  text-align: center;
  color: #409EFF;
  padding: 10px 0;
}

.document-list {
  margin-bottom: 20px;
  position: relative;
}

.pagination-container {
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
}

.document-title {
  display: flex;
  align-items: center;
  gap: 10px;
}

.document-icon {
  font-size: 16px;
}

.document-icon.type-doc {
  color: #409EFF;
}

.document-icon.type-ppt {
  color: #E6A23C;
}

.document-icon.type-excel {
  color: #67C23A;
}

.document-icon.type-pdf {
  color: #F56C6C;
}

/* 网格视图样式 */
.grid-view {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 16px;
  margin-top: 20px;
}

.document-card {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.document-card-header {
  display: flex;
  align-items: center;
  padding-bottom: 10px;
  border-bottom: 1px solid #f0f0f0;
}

.document-card-title {
  flex: 1;
  margin: 0 10px;
  font-weight: bold;
  cursor: pointer;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.document-card-title:hover {
  color: #409EFF;
}

.document-card-actions {
  display: flex;
  gap: 10px;
}

.document-card-actions .el-icon {
  cursor: pointer;
  font-size: 16px;
  color: #909399;
}

.document-card-actions .el-icon:hover {
  color: #409EFF;
}

.document-card-actions .is-favorite {
  color: #E6A23C;
}

.document-card-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 10px 0;
}

.document-card-desc {
  flex: 1;
  margin: 0 0 10px;
  font-size: 14px;
  color: #606266;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

.document-card-tags {
  margin-bottom: 10px;
}

.document-card-footer {
  display: flex;
  justify-content: space-between;
  font-size: 12px;
  color: #909399;
}

.document-card-team {
  font-weight: bold;
  color: #409EFF;
}

.tag-input {
  width: 84px;
  margin-left: 8px;
  vertical-align: bottom;
}

.button-new-tag {
  margin-left: 8px;
}

.share-link {
  display: flex;
  align-items: center;
}

.upload-container {
  width: 100%;
}

.upload-options {
  margin-top: 20px;
}

.mx-1 {
  margin: 0 4px 4px 0;
}

.action-icons {
  display: flex;
  gap: 10px;
  justify-content: center;
  align-items: center;
}

.file-path-nav {
  margin: 15px 0;
  padding: 8px 15px;
  background-color: #f9f9f9;
  border-radius: 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.path-nav-container {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 10px;
}

.el-breadcrumb {
  margin-left: 8px;
}

.search-result-info {
  color: #606266;
  font-size: 14px;
}

.path-actions {
  margin-left: auto;
}

.file-name-cell {
  display: flex;
  align-items: center;
}

.file-icon {
  margin-right: 8px;
  font-size: 16px;
}

.file-icon.is-folder {
  color: #e6a23c;
}

/* 表格样式优化 */
.document-list .el-table {
  border-radius: 4px;
  overflow: hidden;
  margin-top: 15px;
}

.document-list :deep(.el-table__row) {
  cursor: pointer;
}

.document-list :deep(.el-table__row:hover > td) {
  background-color: #f5f7fa;
}

.document-list :deep(.el-table__header-wrapper th) {
  height: 50px;
  font-weight: 600;
}

.tag-in-table {
  margin: 2px;
}

.table-actions {
  display: flex;
  justify-content: center;
  gap: 5px;
}

.table-actions .el-button {
  padding: 5px;
}

.folder-name {
  color: #409EFF;
  cursor: pointer;
  font-weight: 500;
}

.folder-name:hover {
  text-decoration: underline;
}

/* 创建团队按钮容器样式 */
.tabs-header-with-button {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.tabs-header-with-button .el-tabs {
  flex: 1;
}

.create-team-btn {
  margin-left: 20px;
  margin-right: 10px;
}

.create-team-btn .el-button {
  transition: all 0.3s ease;
}

.create-team-btn .el-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.team-info-container {
  padding: 10px;
}

.team-members-container {
  max-height: 400px;
  overflow-y: auto;
}

.member-item {
  margin-bottom: 15px;
}

.member-item:last-child {
  margin-bottom: 0;
}

.status-description {
  margin-top: 5px;
  font-size: 13px;
  color: #606266;
}

.status-description p {
  margin: 4px 0;
}

/* 移除申请列表表格阴影 */
.el-table {
  --el-table-border-color: var(--el-border-color-lighter);
  --el-table-border: 1px solid var(--el-table-border-color);
  --el-table-text-color: var(--el-text-color-regular);
  --el-table-header-text-color: var(--el-text-color-secondary);
  --el-table-row-hover-bg-color: var(--el-fill-color-light);
  --el-table-current-row-bg-color: var(--el-color-primary-light-9);
  --el-table-header-bg-color: var(--el-fill-color-light);
  --el-table-fixed-box-shadow: var(--el-box-shadow-light);
  --el-table-bg-color: var(--el-fill-color-blank);
  --el-table-tr-bg-color: var(--el-fill-color-blank);
  --el-table-expanded-cell-bg-color: var(--el-fill-color-blank);
  box-shadow: none !important;
}

.no-applies .el-empty {
  margin: 20px 0;
}

/* 申请信息单元格样式 */
.apply-message-cell {
  white-space: normal;
  word-break: break-word;
  line-height: 1.5;
  max-height: 3em;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}
</style>